{"type":"doc","content":[{"type":"heading","attrs":{"level":1,"class":"pm-align--center"},"content":[{"type":"text","text":"Function Structure"}]},{"type":"heading","attrs":{"level":2,"class":"pm-align--left"},"content":[{"type":"text","text":"Arguments"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"The fewer the better. The same goes for constructors."}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Three arguments "},{"type":"text","marks":[{"type":"strong"}],"text":"MAX"},{"type":"text","text":"!."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"NO "},{"type":"text","text":"Boolean arguments, "},{"type":"text","marks":[{"type":"strong"}],"text":"EVER"},{"type":"text","text":"!."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"NO"},{"type":"text","text":" output arguments, "},{"type":"text","marks":[{"type":"strong"}],"text":"please"},{"type":"text","text":"! Better just use the return statement."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"NO "},{"type":"text","text":"nulls (pseudo Boolean)."}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Defensive programming only on public APIs, if your system is within your team better have a good suite of test to validate no null data is passed to your functions."}]},{"type":"heading","attrs":{"level":2,"class":"pm-align--left"},"content":[{"type":"text","text":"The Step-down Rule"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Public are on top, private on the bottom."}]},{"type":"code_block","attrs":{"params":"ts","collapsed":false},"content":[{"type":"text","text":"Class\n  private variables //  Abstract\n    public methods //         | Parent\n      private methods //      | Children / Parent\n        private methods //    | Children / Parent\n          private methods // Detailed | Children"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Every function calls children function which they call their own children function. We order them in the order that they are called and their hierarchy. "},{"type":"text","marks":[{"type":"strong"}],"text":"NO"},{"type":"text","text":" backwards references."}]},{"type":"heading","attrs":{"level":2,"class":"pm-align--left"},"content":[{"type":"text","text":"Switch and Cases / If"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Switch statements are a missed opportunity for polymorphism. Also they break our plugin structure in our application."}]},{"type":"heading","attrs":{"level":2,"class":"pm-align--left"},"content":[{"type":"text","text":"Paradigms"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Functional Programming"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"No assignment statements."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Functions are true mathematical functions. You call functions that always return the same value back and depends only on it’s input arguments rather than an state of the system."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"No side effects."}]}]}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"When a function changes a variable that outlives the function call then that function has a side effect."}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Temporal Coupling "},{"type":"text","text":"is when you depend on one thing happening before or after another thing. Things happen in a particular order."}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Command Query Separation"},{"type":"text","text":":"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"A command changes the state of the system and return nothing, has a side effect (Setters). A query does not, return the value of a computation or the state of the system (Getters)."}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Functions that changes state should not return value, functions that return value should not change state."}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Tell Don’t Ask"},{"type":"text","text":": Tell the object what to do and don’t ask the object what its state is."}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"The Law of Demeter"},{"type":"text","text":": Is a bad a idea for a single functions to know the entire navigation structure of the system."}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Structured Programming"}]}]}]}]}